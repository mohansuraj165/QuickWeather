syntax = "proto3";

package mailchimp.marketplace;
option go_package = "git.rsglab.com/rsg/marketplace/internal/proto/marketplace";

import "google/protobuf/timestamp.proto";
import "tagger.proto";

/**
 * Structure of GetTemplate request object
 */
message GetTemplateRequest {
  string template_id = 1; //ID of a template
}

/**
 * Structure of Template object
 */
message Template {
  string version_id = 1;
  string template_id = 2;
  string name = 3 [(tagger.tags) = 'validate:"required"'];
  string tagline = 4;
  string description = 5;
  double display_price = 6;
  string creator_name = 7;
  string creator_website = 8;
  int64 mailchimp_template_id = 9;
  string json_content = 10;
  string thumbnail_url = 11;
  string category = 12;
  message InspirationGallery {
    string thumbnail_url = 1;
    string overlay_url = 2;
  }
  repeated InspirationGallery inspiration_gallery = 13;
  repeated string tags = 14;
  repeated string safe_names = 15;
  google.protobuf.Timestamp created_at = 16;
  google.protobuf.Timestamp updated_at = 17;
  repeated string typos = 18;
}

message TemplateList {
  repeated Template templates = 1;
}

/**
 * Structure of GetTemplate response object
 */
message GetTemplateResponse {
  Template template = 1; //Template returned by ID
}

message CreateTemplateRequest {
  Template template = 1;
}

message CreateTemplateResponse {
  string template_id = 1;
}


message ListTemplatesRequest {
  string search_term = 1;
  double min_price = 2;
  double max_price = 3;
  repeated string tags = 4;
}

message ListTemplatesResponse {
  TemplateList template_list = 1;
}

message DeleteTemplateRequest {
  string template_id = 1;
}

message DeleteTemplateResponse {

}

message UpdateTemplateRequest {
  Template template = 1;
}

message UpdateTemplateResponse {
  Template template = 1;
}

message GetTemplateByRouteRequest {
  string url_slug = 1;
}

message GetTemplateByRouteResponse {
  Template template = 1;
}

message GetTemplateByMailchimpIdRequest {
  int64 mailchimp_id = 1;
}

message GetTemplateByMailchimpIdResponse {
  Template template = 1;
}




message Route {
  string url_slug = 1 [(tagger.tags) = 'validate:"required"'];
  string entry_id = 2 [(tagger.tags) = 'validate:"required"'];
  string entry_type = 3 [(tagger.tags) = 'validate:"required"'];
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message CreateRouteRequest {
  Route route = 1;
}

message CreateRouteResponse {
}

message GetRouteRequest {
  string url_slug = 1;
}

message GetRouteResponse {
  Route route = 1;
}

message UpdateRouteRequest {
  Route route = 1;
}

message UpdateRouteResponse {
  Route route = 1;
}

message DeleteRouteRequest {
  string url_slug = 1;
}

message DeleteRouteResponse {

}

message Link {
  string link_text = 1;
  string link_url = 2;
}

message Image {
  string image_url = 1;
  string alt_text = 2;
}

message Video {
  string provider = 1;
  string video_id = 2;
}

message IntegrationFeature {
  string favicon_url = 1;
  string heading = 2;
  string bullet_points = 3;
}

message Integration {
  string version_id = 1;
  string integration_id = 2;
  string name = 3;
  string directory_url = 4;
  string description = 5;
  string logo_url = 6;
  string developer = 7;
  google.protobuf.Timestamp last_updated = 8;
  repeated string categories = 9;
  //  listing
  string app_icon_url = 10;
  Link primary_cta = 11;
  Link secondary_cta = 12;
  Video video = 13;
  string body_heading = 14;
  string body_text = 15;
  string cost_text = 16;
  string languages = 17;
  Link website_link = 18;
  repeated IntegrationFeature features = 19;
  repeated Image gallery = 20;
  Link installation_cta = 21;
  repeated Link secondary_links = 22;
  string requirements = 23;
  string support_text = 24;
  repeated string tags = 25;
  repeated string safe_names = 26;
  repeated string typos = 27;
  string client_id = 28;
  bool coming_soon = 29;
  string permissions = 30;
  string installation_steps = 31;
  string faq = 32;
}

//Input to create a new integration
message CreateIntegrationRequest {
  Integration integration = 1; //Integration object structure
}

//Returns the ID of a newly created integration
message CreateIntegrationResponse {
  string integration_id = 1; //ID of integration
}

message GetIntegrationRequest {
  string integration_id = 1;
}

message GetIntegrationResponse {
  Integration integration = 1;
}

message IntegrationList {
  repeated Integration integrations = 1;
}

message ListIntegrationsRequest {
  string search_term = 1;
  string developer = 2;
  repeated string tags = 3;
  bool coming_soon_first = 4;
  int64 limit = 5;
}

message ListIntegrationsResponse {
  IntegrationList integration_list = 1;
}

message GetIntegrationByRouteRequest {
  string url_slug = 1;
}

message GetIntegrationByRouteResponse {
  Integration integration = 1;
}

message UpdateIntegrationRequest {
  Integration integration = 1;
}

message UpdateIntegrationResponse {
  Integration integration = 1;
}

message Discount {
  string discount_id = 1;
  string partner_name = 2;
  string partner_logo = 3;
  string partner_url = 4;
  string discount_plan = 5;
  int64 discount_percent = 6;
  int64 discount_period = 7;
  string integration_id = 8;
}

message DiscountList {
  repeated Discount discounts = 1;
}

message ListDiscountResponse {
  DiscountList discount_list = 1;
}

message GetDiscountRequest {
}

service Marketplace {
  rpc GetTemplate(GetTemplateRequest) returns (GetTemplateResponse);
  rpc GetTemplateByMailchimpID(GetTemplateByMailchimpIdRequest) returns (GetTemplateByMailchimpIdResponse);
  rpc CreateTemplate(CreateTemplateRequest) returns (CreateTemplateResponse);
  rpc DeleteTemplate(DeleteTemplateRequest) returns (DeleteTemplateResponse);
  rpc UpdateTemplate(UpdateTemplateRequest) returns (UpdateTemplateResponse);
  rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesResponse);
  rpc GetTemplateByRoute(GetTemplateByRouteRequest) returns (GetTemplateByRouteResponse);
  rpc GetIntegrationByRoute(GetIntegrationByRouteRequest) returns (GetIntegrationByRouteResponse);
  rpc CreateIntegration(CreateIntegrationRequest) returns (CreateIntegrationResponse);
  rpc GetIntegration(GetIntegrationRequest) returns (GetIntegrationResponse);
  rpc ListIntegrations(ListIntegrationsRequest) returns (ListIntegrationsResponse);
  rpc UpdateIntegration(UpdateIntegrationRequest) returns (UpdateIntegrationResponse);
  rpc CreateRoute(CreateRouteRequest) returns (CreateRouteResponse);
  rpc GetRoute(GetRouteRequest) returns (GetRouteResponse);
  rpc UpdateRoute(UpdateRouteRequest) returns (UpdateRouteResponse);
  rpc DeleteRoute(DeleteRouteRequest) returns (DeleteRouteResponse);
  rpc GetDiscounts(GetDiscountRequest) returns (ListDiscountResponse);
}
